(unless process.env.DISABLE_SOURCE_MAPS
        (.install (require "source-map-support")))
(source-mapping-url "../maps/cli.map")

(require! 'path 'fs
          sibilant "../lib/sibilant.js"
          options "../lib/options.js"
          mod 'module)

(def run-in-sandbox (js input-path)
     (default input-path ".")
     (set require.main
          'module-cache {}
          'filename (fs.realpath-sync input-path)
          'paths (|> input-path fs.realpath-sync path.dirname mod._node-module-paths))
     (require.main._compile js require.main.filename))


(var cli { v         'version
           h         'help
           unhandled 'help
           d         'docs
           f         'file
           o         'output
           x         'execute
           e         'eval
           i         'input
           m         'sourcemap
           after-break false
           execute   false
           unlabeled 'file })

(def cli.version ()
     (console.log (sibilant.version-string)))

(def cli.repl (args)
     (require "../lib/repl"))

(def read-stdin (fn)
     (var stdin process.stdin
          data "")
     (stdin.resume)
     (stdin.set-encoding "utf8")
     (stdin.on 'data (#(chunk) (assign data (concat data chunk))))
     (stdin.on 'end (#> (fn data))))

(def cli.eval (args options)
     (set options 'execute true)
     (cli.input args options))

(def cli.input (args options)
     (def process (sibilant-code)
          (var {js} (sibilant sibilant-code))
          (if options.execute
              (run-in-sandbox js)
              (console.log js)))
     (if (empty? args)
         (read-stdin process)
         (process (first args))))

(def cli.help (args options)
     (fs.read-file (concat **dirname "/../cli-help") { encoding 'utf8 }
                   (#(err data)
                     (when err (throw err))
                     (console.log data))))


(var cli-options (options cli)
     args (or cli-options.after-break []))

(args.unshift (second process.argv) "FILENAME")

(set process
     'argv: args
     'ARGV: args)

(when (empty? (keys cli-options))
      (cli.repl))

(when (and (or (undefined? cli-options.file) (empty? cli-options.file)) cli-options.docs)
      (sibilant.include "./src/macros.sibilant")
      (|> sibilant.docs
          (get (|> cli-options.docs first sibilant (get 'js)))
          call
          console.log))

(each input-file (or cli-options.file [])
      (var input-path (if (match-regex? input-file "^\\/")
                          input-file
                          (path.join (process.cwd) input-file))
           input-extname (path.extname input-path)
           input-basename (path.basename input-path input-extname)
           json? (= ".son" input-extname)
           map? (|> cli-options.sourcemap not not)
           result (sibilant { file: input-path,
                              json: json?
                              map: map? })
           output-dir (when cli-options.output
                            (or (first cli-options.output)
                                (path.dirname input-path)))
           map-dir (when cli-options.sourcemap 
                         (or (first cli-options.sourcemap)
                             output-dir))
           output-extname (if json? ".json" ".js"))

      (if
       output-dir
       (do
           (var output-path (concat (path.join output-dir input-basename)
                                    output-extname))

           (fs.write-file-sync output-path result.js)
           (when map-dir
                 (var map-path (concat (path.join map-dir input-basename) ".map"))
                 (fs.write-file-sync map-path (result.map.to-string))))
          
       cli-options.execute
       (run-in-sandbox result.js input-path)

       (console.log result.js))

      (when cli-options.docs
            (console.log ((get sibilant.docs (first cli-options.docs))))))

