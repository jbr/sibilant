(|> "source-map-support" require .install)
(source-mapping-url "../maps/repl.map")

(require! sibilant: "./sibilant",
          'cardinal, 'util, 'vm 'fs)

(var input      (process.open-stdin)
     output     process.stdout
     readline   (|> 'readline require (.create-interface input output))
     context    undefined
     cmd-buffer ""
     HISTORY-FILE (|> process.env.SIBILANT-REPL-HISTORY-FILE
                      (or (""process.env.HOME"/.sibilant.history")))
     fd undefined)


(.access fs HISTORY-FILE fs.R-OK
         (#(err)
           (unless err
                   (|> fs.read-file-sync(HISTORY-FILE "utf-8")
                       .split("\n\n")
                       .reverse
                       .filter((#-> as-boolean))
                       set(readline 'history #)))))

(assign fd fs.open-sync(HISTORY-FILE 'a))



(def create-context ()
     (var context (vm.create-context))
     (set module 'filename (|> (process.cwd) (concat "/exec")))
     (set context
          '*sibilant sibilant
          'module  module
          'require require)
     (each-key key global (set context key (get global key)))
     context)

(assign context (create-context))

(def display-prompt ()
     (var open (|> cmd-buffer (.split (regex "[\\{\\[\\(]" 'g)) length)
          closed (|> cmd-buffer (.split (regex "[\\}\\]\\)]" 'g)) length)
          indentation "")

     (while (> open closed)
            (assign indentation ("  " indentation))
            (decr open))

     (readline.set-prompt (if (empty? cmd-buffer)
                              "sibilant> "
                              ("          " indentation)))
     ;;                              "            "))
     (readline.prompt))

(def handle-line (cmd)
     (var js-line "")

     (try
      (do
       (assign cmd-buffer (concat cmd-buffer cmd)
               {js} (sibilant cmd-buffer))

       (var safe-js (if (= (first js) "{")
                        (pipe js
                              ((sibilant.resolve-macro 'scoped))
                              sibilant.transpile
                              sibilant.output-formatter)
                        js))

       (try
        (|> js cardinal.highlight console.log)
        (console.dir js))

       (var result (vm.run-in-context safe-js context "sibilant-repl"))
       (set readline.history 0 cmd-buffer)
       (.write-sync fs fd (""cmd-buffer"\n\n"))
       (when (defined? result)
             (output.write ("result: "
                                 (util.inspect result { colors true }) "\n")))
       (set context "_" result)
       (assign cmd-buffer ""))
      (do
       (if (match-regex? e.message "unclosed node")
           (do
            (assign cmd-buffer (concat cmd-buffer "\n"))
            (readline.history.shift))
           (do
            (set readline.history 0 cmd-buffer)
            (.write-sync fs fd (""cmd-buffer"\n\n"))
            (.write output (concat e.stack "\n"))
            (assign  cmd-buffer "")))))
     (display-prompt))

(readline.on 'line handle-line)

(readline.on 'close (#>
                     fs.close-sync(fd)
                     (output.write "\nexiting")
                     (input.destroy)))

(display-prompt)
